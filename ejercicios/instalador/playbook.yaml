-   hosts: windows #all
    
    vars:
        software:
            # DESASTRE GIGANTE !!!!! MIERDA MAGNA !
            - nombre: apache
              #ruta_instalador: ~
              url_instalador: "https://archive.apache.org/dist/httpd/binaries/win32/httpd-2.2.25-win32-x86-no_ssl.msi"
              # Repo git con el fichero config
              configuracion_repo: "https://github.com/IvanciniGT/webEjemploAnsible"
              configuracion_filename: "configuracion.apache"
              configuration_file_dest: 'C:\Program Files (x86)\Apache Software Foundation\Apache2.2\conf\httpd.conf'
              service_command: 'C:\Program Files (x86)\Apache Software Foundation\Apache2.2\bin\httpd.exe -k runservice'
              argumentos_instalador: []
              puertos:
                - 80

    pre_tasks:
        -   name: Asegurarme que hay unas carpetas temporales donde ubicar recursos necesarios
            block:
                -   name: Carpeta temporal base
                    #debug:
                    #    msg: Asegurando que existe carpeta temporal
                    win_file:
                        path: c:\temporal
                        state: directory

                -   name: Asegurando que existe carpeta para cada software
                    #debug:
                    #    msg: "Creando carpeta del software: {{ item.nombre }}"
                    win_file:
                        path: "c:\\temporal\\{{ item.nombre }}"
                        state: directory

                    loop: "{{ software }}"
            tags:
                - preparacion
                    
        -   name: Asegurarme que tengo los programas de instalación
            block:
                -   name: Descargar los programas de instalación que sean descargables
                    win_get_url:
                        url: "{{ item.url_instalador }}"
                        dest: "c:\\temporal\\{{ item.nombre }}\\instalador.msi"
                        force: no
                        
                    #debug:
                    #    msg: "Descarga software {{ item.url_instalador }}"
                    when: item.url_instalador is defined
                    loop: "{{ software }}"
                  
                -   name: Traerme de un entorno de mi red un programas de instalación que ya hubiera conseguido por algún medio
                    debug:
                        msg: "Copiar software {{ item.ruta_instalador }}"
                    when: item.ruta_instalador is defined
                    loop: "{{ software }}"
            tags:
                - preparacion
    
        # Acabo con unos ejecutables en una carpeta: c:\windows\temp
        -   name: Hacerme con las configuraciones
            block:
                -   name: Descargar configuraciones de un scm
                    local_action: # delegate_to: localhost
                        module: git
                        repo: "{{ item.configuracion_repo }}"
                        dest: "/tmp/{{ item.nombre }}/configuracion"

                    when: item.configuracion_repo is defined
                    loop: "{{ software }}" # lista de valores... de donde la sacas
            tags:
                - preparacion
    
        # Acabo con unas configuraciones en una carpeta: c:\windows\temp
    tasks:
        - name: Asegurar que el software queda instalado en la máquina
          win_package:
                path: "c:\\temporal\\{{ item.nombre }}\\instalador.msi"
                state: present

          loop: "{{ software }}"
          tags:
            - instalacion
        # En la medida de lo posible NUNCA JAMAS NUNCA JAMAS DE LOS JAMASES EJECUTO UN COMANDO.... NUNCA !!!!
        
        # Siempre quiero ejecutar el instalador?
        # "Ejecutar instalador" es el nombre que NUNCA JAMAS DE LOS JAMASE MAS QUE LOS DE ARRIBA DE LOS JAMAS MAS NUNCA LO PONDRIA 
        # En que caso no? Si ya está instalado.
        
        - name: Asegurar que hay la configuración adecuada
          # Copiar la configuración a la carpeta adecuada.. Desde el controlador , hasta el remoto
          win_copy:
            src: "/tmp/{{ item.nombre }}/configuracion/{{ item.configuracion_filename }}"
            dest: "{{ item.configuration_file_dest }}"
          loop: "{{ software }}"
          tags:
            - configuracion
          notify: CAMBIO_CONFIGURACION_SERVICIO
        
        - name: Asegurar que hay un servicio creado y configurado
          win_service:
            name: "{{ item.nombre }}"
            path: "{{ item.service_command }}"
            display_name: "Servicio de {{ item.nombre | title }} creado desde Ansible"
            start_mode: auto
          loop: "{{ software }}"
          tags:
            - configuracion
        
        - name: Asegurar que los puertos queden abiertos
          win_firewall_rule:
            name: "Puerto {{ item.1 }} de {{ item.0.nombre }}"
            localport: "{{ item.1 }}"
            action: allow
            direction: in
            protocol: tcp
            state: present
            enabled: yes
        # modulo... que hará la copia a la ubicacion correcta... pero entre medias... sustituirá algunos parametros
            # Cómo me refiero a un puerto????
            # Puerto: item[1]             item.1
            # Nombre: item[0].nombre      item.0.nombre
          loop: "{{ software | subelements('puertos') }}"
          tags:
            - configuracion
        
        

    post_tasks:
        -   name: Asegurar que el servicio queda iniciado
            win_service:
                name: "{{ item.nombre }}"
                state: started
            # modulo... que hará la copia a la ubicacion correcta... pero entre medias... sustituirá algunos parametros
            loop: "{{ software }}"
            tags:
            - configuracion

        -   name: Borrar carpetas si existen
            win_file:
                path: c:\temporal
                state: absent
            tags:
                - limpieza    

        -   name: Smoke Test
            block:
                -   name: Comprobar servicios
                    win_uri:
                        url: "http://localhost:{{ item[1] }}"
                        status_code: 200
                    loop: "{{ software | subelements('puertos') }}"
            tags:
                - tests
        
    
    
    handlers:
        - name: Reiniciar Servicio
          win_service:
                name: "{{ item.nombre }}"
                state: restarted
          loop: "{{ software }}"
          tags:
            - configuracion
          listen:
            - CAMBIO_CONFIGURACION_SERVICIO
        


#######
#.       $ ansible-playbook -i inventario.??? --skip-tags="preparacion,limpieza"  playbook.yaml #.       
#.       $ ansible-playbook -i inventario.??? --tags="instalacion"  playbook.yaml 

